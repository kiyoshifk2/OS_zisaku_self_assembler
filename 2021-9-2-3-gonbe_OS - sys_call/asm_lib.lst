     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  [BITS 32]						; 32ビットモード用の機械語を作らせる/
     5                                  
     6                                  	GLOBAL	_enable_interrupt, _disable_interrupt
     7                                  	GLOBAL	_io_out8
     8                                  	GLOBAL	_key_input, key_input_return
     9                                  	GLOBAL	_load_gdtr, _load_idtr, _load_tr
    10                                  	GLOBAL	_load_cr0, _store_cr0
    11                                  	GLOBAL	_io_load_eflags, _io_store_eflags
    12                                  	GLOBAL	_gonbe_hlt
    13                                  	GLOBAL	_asm_inthandler20
    14                                  ;;;	GLOBAL	_read_idt, _write_idt, _idt_save
    15                                  	GLOBAL	_farjmp
    16                                  	GLOBAL	_asm_syscall40, _asm_int_0x40
    17                                  	GLOBAL	_asm_ut_puts
    18                                  	GLOBAL	_ut_setjmp, _ut_longjmp
    19                                  	GLOBAL	_dbg1
    20                                  
    21                                  	EXTERN	_inthandler20, _dot_brue
    22                                  	EXTERN	_gonbe_main, _stack_buf
    23                                  	EXTERN	_syscall40, _stack_40
    24                                  
    25                                  [SECTION .data]
    26                                  
    27 00000000 34127856BC9A            _idt_save:	dw 0x1234,0x5678,0x9abc
    28                                  
    29                                  [SECTION .text_asm_lib]
    30                                  
    31                                  key_input_return:	;org 0+0x20	; 0x20 はリンカスクリプト先頭で宣言したテーブルのサイズ/
    32                                  ;;;	sti		;割り込み許可
    33 00000000 C3                      	ret
    34                                  
    35 00000001 90<rept>                	times	0x10 - ($-$$)	nop
    36                                  gonbe_main_jmp:		; org 0x10+0x20
    37 00000010 E9(00000000)            	jmp	_gonbe_main
    38                                  
    39 00000015 90<rept>                	times	0x20 - ($-$$)	nop
    40                                  stack_address:		; org 0x20+0x20
    41 00000020 [00000000]              	dd	_stack_buf
    42                                  
    43                                  _key_input:	; int key_input(void);
    44                                  
    45                                  ;	このルーチンを呼び出すときは上位にて割り込み禁止/許可を行う事/
    46                                  
    47                                  ;;;	cli				;割り込み禁止/
    48 00000024 EA007E00001800          	jmp	dword 3*8:0x7e00	;16bit プロテクトモードのセグメント/
    49                                  	
    50                                  	
    51                                  waitkbdout:
    52 0000002B E464                    		IN		 AL,0x64
    53 0000002D 2402                    		AND		 AL,0x02
    54 0000002F E460                    		IN		 AL,0x60 		; から読み(受信バッファが悪さをしないように)/
    55 00000031 75F8                    		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ/
    56 00000033 C3                      		RET
    57                                  
    58                                  ;-------------------------------------------------------------------------------
    59                                  
    60                                  _enable_interrupt:	; void enable_interrupt();
    61 00000034 FB                      	sti
    62 00000035 C3                      	ret
    63                                  
    64                                  _disable_interrupt:	; void disable_interrupt();
    65 00000036 FA                      	cli
    66 00000037 C3                      	ret
    67                                  
    68                                  _io_out8:	; void io_out8(int port, int data);
    69 00000038 8B542404                		MOV		EDX,[ESP+4]		; port
    70 0000003C 8A442408                		MOV		AL,[ESP+8]		; data
    71 00000040 EE                      		OUT		DX,AL
    72 00000041 C3                      		RET
    73                                  
    74                                  ;-----------------------------------------------------------------------------------------
    75                                  
    76                                  _load_gdtr:	; void load_gdtr(int limit, int addr);
    77 00000042 668B442404              	MOV	AX,[ESP+4]		; limit
    78 00000047 6689442406              	MOV	[ESP+6],AX
    79 0000004C 0F01542406              	LGDT	[ESP+6]
    80 00000051 C3                      	RET
    81                                  
    82                                  _load_idtr:		; void load_idtr(int limit, int addr);
    83 00000052 668B442404              		MOV		AX,[ESP+4]		; limit
    84 00000057 6689442406              		MOV		[ESP+6],AX
    85 0000005C 0F015C2406              		LIDT	[ESP+6]
    86 00000061 C3                      		RET
    87                                  
    88                                  _read_idt:	; void read_idt();
    89 00000062 0F010D[00000000]        	sidt	[_idt_save]
    90 00000069 C3                      	ret
    91                                  
    92                                  _write_idt:	; void write_idt();
    93 0000006A 0F011D[00000000]        	lidt	[_idt_save]
    94 00000071 C3                      	ret
    95                                  
    96                                  _load_tr:		; void load_tr(int tr);
    97 00000072 0F005C2404              		LTR		[ESP+4]			; tr
    98 00000077 C3                      		RET
    99                                  
   100                                  ;----------------------------------------------------------------------------------------
   101                                  
   102                                  _load_cr0:	;int load_cr0();
   103 00000078 0F20C0                  	mov	eax,cr0
   104 0000007B C3                      	ret
   105                                  
   106                                  _store_cr0:	;void store_cr0(int cr0);
   107 0000007C 8B442404                	mov	eax,[esp+4]
   108 00000080 0F22C0                  	mov	cr0,eax
   109 00000083 C3                      	ret
   110                                  
   111                                  ;-------------------------------------------------------------------------
   112                                  
   113                                  _io_load_eflags:	; int io_load_eflags(void);
   114 00000084 9C                      	PUSHFD		; PUSH EFLAGS という意味/
   115 00000085 58                      	POP	EAX
   116 00000086 C3                      	RET
   117                                  
   118                                  _io_store_eflags:	; void io_store_eflags(int eflags);
   119 00000087 8B442404                	MOV	EAX,[ESP+4]
   120 0000008B 50                      	PUSH	EAX
   121 0000008C 9D                      	POPFD		; POP EFLAGS という意味/
   122 0000008D C3                      	RET
   123                                  
   124                                  ;-----------------------------------------------------------------------
   125                                  
   126                                  _ut_setjmp:		; int ut_setjmp(int *env);
   127 0000008E 8B542404                	mov	edx,[esp+4]
   128 00000092 8922                    	mov	[edx],esp
   129 00000094 B800000000              	mov	eax,0
   130 00000099 C3                      	ret
   131                                  
   132                                  _ut_longjmp:		; int ut_longjmp(int env);
   133 0000009A 8B642404                	mov	esp,[esp+4]
   134 0000009E B801000000              	mov	eax,1
   135 000000A3 C3                      	ret
   136                                  
   137                                  ;-----------------------------------------------------------------------
   138                                  
   139                                  _gonbe_hlt:	;void gonbe_hlt();
   140 000000A4 F4                      	hlt
   141 000000A5 C3                      	ret
   142                                  
   143                                  ;---------------------------------------------------------------------
   144                                  
   145                                  _asm_inthandler20:
   146                                  
   147                                  ;L10:	hlt
   148                                  ;	jmp L10
   149                                  
   150 000000A6 06                      		PUSH	ES
   151 000000A7 1E                      		PUSH	DS
   152 000000A8 60                      		PUSHAD
   153 000000A9 89E0                    		MOV		EAX,ESP
   154 000000AB 50                      		PUSH	EAX
   155 000000AC 668CD0                  		MOV		AX,SS
   156 000000AF 8ED8                    		MOV		DS,AX
   157 000000B1 8EC0                    		MOV		ES,AX
   158 000000B3 E8(00000000)            		CALL	_inthandler20
   159 000000B8 58                      		POP		EAX
   160 000000B9 61                      		POPAD
   161 000000BA 1F                      		POP		DS
   162 000000BB 07                      		POP		ES
   163 000000BC CF                      		IRETD
   164                                  
   165                                  ;---------------------------------------------------------------------
   166                                  
   167                                  _farjmp:		; void farjmp(int eip, int cs);
   168 000000BD FF6C2404                		JMP		FAR	[ESP+4]				; eip, cs
   169 000000C1 C3                      		RET
   170                                  
   171                                  ;---------------------------------------------------------------------
   172                                  ;	このプログラムは main_task ではなくて別のコンテキストになる/
   173                                  ;	ds,es: は main_task の data エリアを使う/
   174                                  
   175                                  _asm_syscall40:
   176 000000C2 0FA0                    	push	fs
   177 000000C4 0FA8                    	push	gs
   178 000000C6 1E                      	push	ds
   179 000000C7 06                      	push	es
   180 000000C8 66B80800                	mov	ax,1 * 8
   181 000000CC 8EE0                    	mov	fs,ax
   182 000000CE 8EE8                    	mov	gs,ax
   183 000000D0 8ED8                    	mov	ds,ax
   184 000000D2 8EC0                    	mov	es,ax
   185                                  
   186 000000D4 668CD0                  	mov	ax,ss
   187 000000D7 66A3[00000000]          	mov	[_stack_40],ax
   188 000000DD 8925[02000000]          	mov	[_stack_40+2],esp
   189 000000E3 66B80800                	mov	ax,1 * 8
   190 000000E7 8ED0                    	mov	ss,ax
   191 000000E9 BC[10270000]            	mov	esp,_stack_40+10000
   192                                  
   193 000000EE 52                      	push	edx
   194 000000EF 51                      	push	ecx
   195 000000F0 53                      	push	ebx
   196                                  
   197 000000F1 E8(00000000)            	call	_syscall40
   198                                  
   199                                  ;;;	add	esp,12
   200                                  
   201 000000F6 668B1D[00000000]        	mov	bx,[_stack_40]
   202 000000FD 8ED3                    	mov	ss,bx
   203 000000FF 8B25[02000000]          	mov	esp,[_stack_40+2]
   204                                  
   205 00000105 07                      	pop	es
   206 00000106 1F                      	pop	ds
   207 00000107 0FA9                    	pop	gs
   208 00000109 0FA1                    	pop	fs
   209 0000010B CF                      	iretd
   210                                  
   211                                  
   212                                  _asm_int_0x40:	; int asm_int_0x40(int ebx, int ecx, int edx);
   213 0000010C 8B54240C                	mov	edx,[esp+12]
   214 00000110 8B4C2408                	mov	ecx,[esp+8]
   215 00000114 8B5C2404                	mov	ebx,[esp+4]
   216 00000118 CD40                    	int	0x40
   217 0000011A C3                      	ret
   218                                  
   219                                  ;------------------------------------------------------------------------------
   220                                  
   221                                  _dbg1:		; int dbg1(int addr);
   222 0000011B 8B542404                	mov	edx,[esp+4]
   223 0000011F B800000000              	mov	eax,0
   224 00000124 2E8A02                  	mov	al,[cs:edx]
   225 00000127 C3                      	ret
